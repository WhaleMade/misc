@gabehollombe convinced me to write this. let's see how long it takes.

Here's the challenge details:
* http://instagram-engineering.tumblr.com/post/12651721845/instagram-engineering-challenge-the-unshredder

He did his in coffeescript+canvas (because he hates himself :) 
* code: https://github.com/gabehollombe/unshred/
* demo: http://gabehollombe.github.com/unshred/

It's very cool, but I wanted to try a different algorithm which I was sure would work. My basic idea: use levenshtein distances on columns!

RESULT
===
It worked!

the bonus is easy: to detect width, just run the distances to find deltas and count the delta spikes, will do that if i have time/motivation, but my itch is pretty scratched here...

Now yes, in a real world implementation, the distances should probably be calculating euclidean distances for the pixel (maybe shifting to a different color space w/ different weighting) and then summing/avging the diffed columns, but what fun is that?

DEPENDENCIES
===
* easy_install python-Levenshtein

REFERENCE
===
For those interested in some fun algorithms:
http://en.wikipedia.org/wiki/Levenshtein_distance
http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance
http://en.wikipedia.org/wiki/Hamming_distance

For boring "real" stuff:
http://en.wikipedia.org/wiki/Color_difference
http://en.wikipedia.org/wiki/Euclidean_distance

STATS
===

01-basic.py
started:  2011-11-23 1:40am
finished: 2011-11-23 3:41am

http://cloc.sourceforge.net v 1.55  T=0.5 s (2.0 files/s, 172.0 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                           1             12              1             73
-------------------------------------------------------------------------------


